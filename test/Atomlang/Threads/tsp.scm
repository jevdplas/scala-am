



;; Example adapted from "Introduction to Parallel Programming", chapter 6
(define (append l m)
  (if (null? l)
      m
      (cons (car l) (append (cdr l) m))))

(define (build-vector n init f)
  (letrec ((v (make-vector n init))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 0)))

(define (map f l)
  (if (pair? l)
      (cons (f (car l)) (map f (cdr l)))
      (if (null? l)
          '()
          (error "map applied to a non-list"))))

(define N (+ 6 (int-top)))
(define (make-cities N)
  (build-vector N '()
                (lambda (i)
                  (letrec ((loopj (lambda (j acc)
                                    (if (= j N)
                                        acc
                                        (if (= i j)
                                            (loopj (+ j 1) acc)
                                            (loopj (+ j 1) (cons (cons j (random 100)) acc)))))))
                    (loopj 0 '())))))

(define cities
  ;; At index i, each cons cell represents the edge and their weight
  (make-cities N))

(define (city-count tour) (length tour))
(define (cost-of from to)
  (let ((alist (vector-ref cities from)))
    (cdr (assoc to alist))))
(define (feasible tour to)
  (if (and (< (city-count tour) (- N 1)) (= to 0))
      #f
      (let ((last-city (if (null? tour) 0 (last tour))))
        (if (assoc to (vector-ref cities last-city))
            (not (member to tour))
            #f))))
(define (last l)
  (if (null? l)
      (error "last: empty list")
      (if (null? (cdr l))
          (car l)
          (last (cdr l)))))
(define (tour-cost tour)
  (define (helper t last-city cost)
    (if (null? t)
        cost
        (helper (cdr t) (car t) (+ cost (cost-of last-city (car t))))))
  (helper tour 0 0))
(define (add-city tour city)
  (append tour (list city)))

(define (tsp-seq)
  (define (helper stack best-tour best-cost)
    (if (null? stack)
        best-tour
        (let ((curr-tour (car stack)))
          (if (= (city-count curr-tour) N)
              (let ((curr-cost (tour-cost curr-tour)))
                (if (< curr-cost best-cost)
                    (helper (cdr stack) curr-tour curr-cost)
                    (helper (cdr stack) best-tour best-cost)))
              (letrec ((loop (lambda (i stack)
                               (if (< i 0)
                                   stack
                                   (if (feasible curr-tour i)
                                       (let ((curr-tour2 (add-city curr-tour i)))
                                         (loop (- i 1) (cons curr-tour2 stack)))
                                       (loop (- i 1) stack))))))
                (helper (loop (- N 1) (cdr stack)) best-tour best-cost))))))
  (helper '(()) '()  1000))

(define (enqueue elem q)
  (append q (list elem)))
(define (dequeue q)
  (car q))
(define (tsp nthreads)
  (define best-tour (t/ref '()))
  (define best-cost (t/ref 1000))
  (define best-lock (t/new-lock))
  (define (set-best-tour tour cost)
    (t/acquire best-lock)
    (if (< cost (t/deref best-cost))
        (begin
          (t/ref-set best-tour tour)
          (t/ref-set best-cost cost))
        #t)
    (t/release best-lock))
  (define (tsp-thread my-stack)
    (if (null? my-stack)
        'done
        (let ((curr-tour (car my-stack)))
          (if (= (city-count curr-tour) N)
              (let ((curr-cost (tour-cost curr-tour)))
                (if (< curr-cost (t/deref best-cost))
                    (set-best-tour curr-tour curr-cost)
                    #t)
                (tsp-thread (cdr my-stack)))
              (letrec ((loop (lambda (i my-stack)
                               (if (< i 0)
                                   my-stack
                                   (if (feasible curr-tour i)
                                       (let ((curr-tour2 (add-city curr-tour i)))
                                         (loop (- i 1) (cons curr-tour2 my-stack)))
                                       (loop (- i 1) my-stack))))))
                (tsp-thread (loop (- N 1) (cdr my-stack))))))))
  (define (tsp-bootstrap queue)
    (if (null? queue)
        #t
        (if (>= (length queue) nthreads)
            (let ((threads (map (lambda (tour)
                                  (t/spawn (tsp-thread (list tour))))
                                queue)))
              (map (lambda (t) (t/join t)) threads))
            (let ((curr-tour (dequeue queue)))
              (if (= (city-count curr-tour) N)
                  (let ((curr-cost (tour-cost curr-tour)))
                    (if (< curr-cost (t/deref best-cost))
                        (set-best-tour curr-tour curr-cost)
                        #t)
                    (tsp-bootstrap (cdr queue)))
                  (letrec ((loop (lambda (i queue)
                                   (if (< i 0)
                                       queue
                                       (if (feasible curr-tour i)
                                           (let ((curr-tour2 (add-city curr-tour i)))
                                             (loop (- i 1) (enqueue curr-tour2 queue)))
                                           (loop (- i 1) queue))))))
                    (tsp-bootstrap (loop (- N 1) (cdr queue)))))))))
  (tsp-bootstrap '(()))
  (t/deref best-tour))

(define nthreads (int-top))
(let ((tsp-sequential (t/spawn (tsp-seq)))
      (tsp-concurrent (t/spawn (tsp nthreads))))
  (equal? (t/join tsp-sequential) (t/join tsp-concurrent)))
